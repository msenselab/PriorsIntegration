// THis model, we assumed there is no global prior and local prior worked independently
// This Stan program defines a independent prior model for duration reproduction task, with a
// vector of observed reproduction 'Y_mix' modeled as normally distributed
// with mean 'mu_r' and standard deviation 'sig_r'.
//


functions {
  real get_weight(real sig_t, real sig_p){
    return(sig_t /(sig_t + sig_p));
  }
  
  real get_mu(real wp_p, real mu_p, real x){  
    return(wp_p *mu_p +(1-wp_p) * x);
  }
  
  real get_variance(real sig_t, real sig_p){
    return(sig_t*sig_p/(sig_t + sig_p));
  }
  
  matrix predictor_mix_rng(real[] x, real sig_t, real sig_pr2_s, real sig_pr2_l,real mu_p_s, real mu_p_l, real sig2_mn) {
    vector[num_elements(x)] predY;         //predication of RP generated by model
    vector[num_elements(x)] wp_local;
    vector[num_elements(x)] mu_r;
    vector[num_elements(x)] sig_r;
    vector[num_elements(x)] log_lik;
    vector[num_elements(x)] wp;
    vector[num_elements(x)] sig_dL_sq;
    
    for (m in 1:num_elements(x)) {
      //part 1 integration of local priors firstly
      if (x[m] < 1){
        wp_local[m] = get_weight((x[m]*sig_t)^2, sig_pr2_s); //weight of local short prior
        mu_r[m] = get_mu(wp_local[m], mu_p_s, x[m]);
        sig_dL_sq[m] = get_variance((x[m]*sig_t)^2, sig_pr2_s);
      }else{
        wp_local[m] = get_weight((x[m]*sig_t)^2, sig_pr2_l); //weight of local long prior
        mu_r[m] =  get_mu(wp_local[m], mu_p_l, x[m]);
        sig_dL_sq[m] = get_variance((x[m]*sig_t)^2, sig_pr2_l);
      }
      wp[m] = 0;
      sig_r[m] =sqrt(sig_dL_sq[m] +sig2_mn);
      predY[m] = normal_rng(mu_r[m], sig_r[m]); 
      log_lik[m] = normal_lpdf(predY[m]|mu_r[m], sig_r[m]);
    }
    return(append_col(append_col(append_col(wp, mu_r), append_col(sig_r, predY)), append_col(append_col(wp_local, sig_dL_sq), log_lik)));
  }
  
}

// The input data 
data {
  int<lower=0> n_mix;  //number of data points in the mix session 
  real<lower=0> X_mix[n_mix];   //stimulus duration (mix group)
  real<lower=0> Y_mix[n_mix];   //measured reproductive duration (mixed) 
  real<lower=0> xnew[162];  //new target duration for mixed group
  real<lower=0, upper=4> sig2_mn;
  real<lower=0, upper=4> sig_t; 
}

// The parameters accepted by the model. Our model
// accepts  parameters 'mu_p_s',  'sig_pr2_s', 'mu_p_l', and 'sig_pr2_l'.
parameters {
  real<lower=0.2, upper =1> mu_p_s;
  real<lower=0, upper =2> sig_pr2_s; 
  real<lower=1, upper =2.4> mu_p_l;
  real<lower=0, upper =2> sig_pr2_l;
}

// The model to be estimated. We model the output
// 'Y_mix' to be normally distributed with mean 'mu_r'
// and standard deviation 'sig_r'.
model {
  vector[n_mix] sig_sm2;
  vector[n_mix] wp_local;
  vector[n_mix] sig_dL_sq;
  vector[n_mix] mu_r;
  sig_pr2_s ~ cauchy(0, 1);
  sig_pr2_l ~ cauchy(0, 1);
  mu_p_s ~ normal(1, 1);
  mu_p_l ~ normal(1, 1);
  
  //mixed session
  for (m in 1:n_mix) {
    //integration of local priors firstly
    if (X_mix[m] < 1){
      wp_local[m] = get_weight((X_mix[m]*sig_t)^2, sig_pr2_s); //weight of local short prior
      mu_r[m] = get_mu(wp_local[m], mu_p_s, X_mix[m]);
      sig_dL_sq[m] = get_variance((X_mix[m]*sig_t)^2, sig_pr2_s);
    }else{
      wp_local[m] = get_weight((X_mix[m]*sig_t)^2, sig_pr2_l); //weight of local long prior
      mu_r[m] = get_mu(wp_local[m], mu_p_l, X_mix[m]);
      sig_dL_sq[m] = get_variance((X_mix[m]*sig_t)^2, sig_pr2_l);
    }
    Y_mix[m] ~ normal(mu_r[m], sqrt(sig_dL_sq[m] +sig2_mn));  
  }
}

generated quantities {
  matrix[n_mix, 7] ypred_mix;
  matrix[162, 7] ynew_mix;
  vector[n_mix] log_lik;
  real log_lik_sum;
  ynew_mix = predictor_mix_rng(xnew, sig_t, sig_pr2_s, sig_pr2_l, mu_p_s, mu_p_l, sig2_mn);
  ypred_mix = predictor_mix_rng(X_mix, sig_t, sig_pr2_s, sig_pr2_l, mu_p_s, mu_p_l, sig2_mn);
  log_lik = col(ypred_mix,7);
  log_lik_sum = sum(log_lik);
}